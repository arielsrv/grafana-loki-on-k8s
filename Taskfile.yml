# yaml-language-server: $schema=https://json.schemastore.org/taskfile.jsonversion: '3'vars:  # app  APP_NAME: grafana  BUILD_DIR: build  S: '{{if eq OS "windows"}}\{{else}}/{{end}}'  # kubernetes  KUBERNETES_APP_NAMESPACE: monitoring  KUBERNETES_MANIFESTS_DIR: deployment  KUBERNETES_APP_DEPLOYMENT_NAME: deployment.v1.apps/{{.APP_NAME}}--rolling-update  KUBERNETES_OUTPUT_DIR: '{{.BUILD_DIR}}{{.S}}kubernetes'  KUBERNETES_INGRESS: '{{.APP_NAME}}.127.0.0.1.nip.io'  KUBERNETES_CERT: '{{.BUILD_DIR}}{{.S}}certs'tasks:  k:fix:    desc: k8s fix    cmds:      - "echo Kubernetes context: $(kubectl config current-context)"      - task: platform:k:fix  k:mkdir:    cmds:      - "echo OS: {{OS}}, ARCH: {{ARCH}}, CGO_ENABLED: {{.CGO_ENABLED}}"      - task: platform:k:mkdir  cert:mkdir:    cmds:      - task: platform:cert:mkdir  k:build:    cmds:      - task: k:mkdir      - kustomize build {{.KUBERNETES_MANIFESTS_DIR}} -o build/kubernetes/release.yaml  k:tls:    cmds:      - |        mkdir -p {{.KUBERNETES_CERT}}        (cd "{{.KUBERNETES_CERT}}" ||exit ; mkcert --install {{.KUBERNETES_INGRESS}})        kubectl create namespace {{.KUBERNETES_APP_NAMESPACE}}        kubectl create secret tls {{.APP_NAME}}--secret \          --cert {{.KUBERNETES_CERT}}{{.S}}{{.KUBERNETES_INGRESS}}.pem \          --key  {{.KUBERNETES_CERT}}{{.S}}{{.KUBERNETES_INGRESS}}-key.pem \          -n {{.KUBERNETES_APP_NAMESPACE}}  k:repo:    cmds:      - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx      - helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server      - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts  k:setup:    cmds:      - helm repo update      - |        helm install ingress-nginx ingress-nginx/ingress-nginx \          --namespace ingress-nginx \          --create-namespace      - kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=120s      - |        helm install metrics-server metrics-server/metrics-server \          --namespace kube-system \          --set args={--kubelet-insecure-tls}      - kubectl rollout status deployment metrics-server -n kube-system --timeout=120s      - helm install kube-state-metrics prometheus-community/kube-state-metrics -n monitoring  k:deploy:    cmds:      - kubectl apply -k ./deployment